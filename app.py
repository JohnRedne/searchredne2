# -*- coding: utf-8 -*-
"""Untitled37.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12ltdYIH4U3gXuystpkRQUnaCYaHBlvnw
"""

from flask import Flask, request, jsonify, send_file
from obspy import read
import requests
import io
import matplotlib.pyplot as plt

app = Flask(__name__)

@app.route('/process_links', methods=['POST'])
def process_links():
    try:
        # Recibe una lista de enlaces desde el cliente
        data = request.json
        urls = data.get('urls', [])
        if not urls:
            return jsonify({"error": "No se proporcionaron enlaces"}), 400

        # Descargar datos de cada enlace
        streams = []
        for url in urls:
            try:
                response = requests.get(url)
                if response.status_code == 200:
                    mini_seed_data = io.BytesIO(response.content)
                    streams.append(read(mini_seed_data))
                else:
                    return jsonify({"error": f"Error al descargar datos del enlace: {url}"}), 500
            except Exception as e:
                return jsonify({"error": f"Error al procesar el enlace {url}: {str(e)}"}), 500

        # Crear un gráfico combinando todos los canales
        fig, ax = plt.subplots(len(streams), 1, figsize=(10, 6 * len(streams)))
        if len(streams) == 1:
            ax = [ax]  # Convertir en lista si solo hay un canal

        for idx, stream in enumerate(streams):
            tr = stream[0]
            times = tr.times("matplotlib")
            ax[idx].plot(times, tr.data, label=f"Canal {tr.stats.channel}", linewidth=0.8)
            ax[idx].set_title(f"Estación {tr.stats.station} - Canal {tr.stats.channel}")
            ax[idx].set_xlabel("Tiempo")
            ax[idx].set_ylabel("Amplitud")
            ax[idx].legend()
            ax[idx].grid()

        # Ajustar diseño del gráfico
        plt.tight_layout()

        # Guardar la imagen en memoria
        output_image = io.BytesIO()
        plt.savefig(output_image, format='png', dpi=100)
        output_image.seek(0)
        plt.close(fig)

        return send_file(output_image, mimetype='image/png')

    except Exception as e:
        return jsonify({"error": f"Ocurrió un error general: {str(e)}"}), 500


# Despliegue local
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)